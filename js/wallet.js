// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
try {
    const keys = ['currentUser', 'userCards', 'pendingWeb3Activation'];
    keys.forEach(key => {
        const item = localStorage.getItem(key);
        if (item && item !== 'undefined' && item !== 'null') {
            try {
                JSON.parse(item);
            } catch (e) {
                console.warn(`Removing corrupted localStorage item: ${key}`);
                localStorage.removeItem(key);
            }
        }
    });
} catch (error) {
    console.error('Error cleaning localStorage:', error);
}

// WEB3 –∫–æ—à–µ–ª–µ–∫ –¥–ª—è CardGift - opBNB + SafePal –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø)
class WalletManager {
    constructor() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        this.config = window.CONTRACT_CONFIG || null;
        
        if (!this.config) {
            console.error('‚ùå CONTRACT_CONFIG –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.js');
            return;
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config
        this.contractAddress = this.config.CONTRACT_ADDRESS;
        this.contractABI = this.config.CONTRACT_ABI;
        this.chainId = this.config.CHAIN_ID;
        this.prices = this.config.PRICES;
        
        // opBNB –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.networkConfig = {
            chainId: '0xCC', // 204 –≤ hex
            chainName: this.config.CHAIN_NAME,
            nativeCurrency: {
                name: this.config.CURRENCY_SYMBOL,
                symbol: this.config.CURRENCY_SYMBOL,
                decimals: this.config.CURRENCY_DECIMALS
            },
            rpcUrls: [this.config.RPC_URL],
            blockExplorerUrls: [this.config.BLOCK_EXPLORER]
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.web3 = null;
        this.contract = null;
        this.currentAccount = null;
        this.isConnected = false;
        this.walletType = null;
        
        console.log('‚úÖ WalletManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º SafePal');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 (–ò–°–ü–†–ê–í–õ–ï–ù–û - –ë–ï–ó –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö–û–®–ï–õ–¨–ö–ê)
    async initWeb3() {
        try {
            console.log('üîç –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏...');
            console.log('window.safepal:', !!window.safepal);
            console.log('window.ethereum:', !!window.ethereum);
            
            let provider = null;
            
            // –ü–†–ò–û–†–ò–¢–ï–¢: SafePal –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º
            if (window.safepal) {
                provider = window.safepal;
                this.walletType = 'SafePal';
                console.log('üü¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º SafePal –∫–æ—à–µ–ª–µ–∫');
            } else if (window.ethereum) {
                provider = window.ethereum;
                this.walletType = 'MetaMask';
                console.log('üü° –ò—Å–ø–æ–ª—å–∑—É–µ–º MetaMask –∫–æ—à–µ–ª–µ–∫');
            } else {
                console.warn('‚ö†Ô∏è –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ Web3');
                return false; // –ù–ï –ë–†–û–°–ê–ï–ú –û–®–ò–ë–ö–£
            }
            
            this.web3 = new Web3(provider);
            
            if (this.contractAddress && this.contractABI) {
                this.contract = new this.web3.eth.Contract(this.contractABI, this.contractAddress);
                console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω:', this.contractAddress);
                return true;
            } else {
                console.warn('‚ö†Ô∏è –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–ª–∏ ABI –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                return false;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Web3:', error);
            return false; // –ù–ï –ë–†–û–°–ê–ï–ú –û–®–ò–ë–ö–£
        }
    }
    
// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)
async connectWallet() {
    try {
        let accounts = [];
        
        if (window.safepal) {
            console.log('üîµ –ü–æ–¥–∫–ª—é—á–∞–µ–º SafePal...');
            accounts = await window.safepal.request({method: 'eth_requestAccounts'});
            this.walletType = 'SafePal';
        } else if (window.ethereum) {
            console.log('‚ö™ –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫...');
            accounts = await window.ethereum.request({method: 'eth_requestAccounts'});
            this.walletType = 'MetaMask';
        }
        
        if (accounts && accounts.length > 0) {
            this.currentAccount = accounts[0];
            this.isConnected = true;
            
            console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:', this.currentAccount);
            return {
                address: this.currentAccount,
                walletType: this.walletType
            };
        }
        
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
        throw error;
    }
}
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ opBNB
    async ensureOpBNBNetwork() {
        try {
            const chainId = await this.web3.eth.getChainId();
            
            if (chainId !== this.chainId) {
                console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ opBNB...');
                await this.switchToOpBNB();
            } else {
                console.log('‚úÖ –£–∂–µ –≤ —Å–µ—Ç–∏ opBNB');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–∏:', error);
            throw error;
        }
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ opBNB
    async switchToOpBNB() {
        try {
            const provider = window.safepal || window.ethereum;
            
            await provider.request({
                method: 'wallet_switchEthereumChain',
                params: [{ chainId: this.networkConfig.chainId }]
            });
            
            console.log('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ opBNB');
            
        } catch (switchError) {
            if (switchError.code === 4902) {
                console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç—å opBNB...');
                await this.addOpBNBNetwork();
            } else {
                throw switchError;
            }
        }
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ opBNB —Å–µ—Ç–∏
    async addOpBNBNetwork() {
        const provider = window.safepal || window.ethereum;
        
        await provider.request({
            method: 'wallet_addEthereumChain',
            params: [this.networkConfig]
        });
        
        console.log('‚úÖ –°–µ—Ç—å opBNB –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    async getBalance() {
        if (!this.currentAccount) {
            throw new Error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
        const balance = await this.web3.eth.getBalance(this.currentAccount);
        return this.web3.utils.fromWei(balance, 'ether');
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async registerUser(referrerId = '') {
        if (!this.isConnected) {
            throw new Error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
        try {
            console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            
            const result = await this.contract.methods
                .registerUser(referrerId)
                .send({ 
                    from: this.currentAccount,
                    gas: 300000
                });
                
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', result);
            return result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            throw error;
        }
    }
    
    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (0.0025 BNB)
    async activateUser() {
        if (!this.isConnected) {
            throw new Error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
        try {
            console.log('üí∞ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            
            const result = await this.contract.methods
                .activateUser()
                .send({ 
                    from: this.currentAccount,
                    value: this.prices.ACTIVATION,
                    gas: 200000
                });
                
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', result);
            return result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
            throw error;
        }
    }
    
    // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–∏–Ω–∏-–∞–¥–º–∏–Ω–∞ (0.05 BNB)
    async activateMiniAdmin() {
        if (!this.isConnected) {
            throw new Error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
        try {
            console.log('üëë –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∏–Ω–∏-–∞–¥–º–∏–Ω–∞...');
            
            const result = await this.contract.methods
                .activateMiniAdmin()
                .send({ 
                    from: this.currentAccount,
                    value: this.prices.MINI_ADMIN,
                    gas: 250000
                });
                
            console.log('‚úÖ –ú–∏–Ω–∏-–∞–¥–º–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', result);
            return result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∏–Ω–∏-–∞–¥–º–∏–Ω–∞:', error);
            throw error;
        }
    }
    
    // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ (0.25 BNB)
    async activateSuperAdmin() {
        if (!this.isConnected) {
            throw new Error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
        try {
            console.log('üëë –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞...');
            
            const result = await this.contract.methods
                .activateSuperAdmin()
                .send({ 
                    from: this.currentAccount,
                    value: this.prices.SUPER_ADMIN,
                    gas: 300000
                });
                
            console.log('‚úÖ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', result);
            return result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞:', error);
            throw error;
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏
    async createCard(metadataHash) {
        if (!this.isConnected) {
            throw new Error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
        try {
            console.log('üé® –°–æ–∑–¥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∫—É...');
            
            const result = await this.contract.methods
                .createCard(metadataHash)
                .send({ 
                    from: this.currentAccount,
                    gas: 200000
                });
                
            console.log('‚úÖ –û—Ç–∫—Ä—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', result);
            return result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:', error);
            throw error;
        }
    }
    
    // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏
    async deleteCard(cardId) {
        if (!this.isConnected) {
            throw new Error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
        try {
            console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç–∫—É...');
            
            const result = await this.contract.methods
                .deleteCard(cardId)
                .send({ 
                    from: this.currentAccount,
                    gas: 150000
                });
                
            console.log('‚úÖ –û—Ç–∫—Ä—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞:', result);
            return result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:', error);
            throw error;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUser(userId) {
    try {
        // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ê–í–¢–û–†–ê
        const owner = await this.contract.methods.owner().call();
        if (userId.toLowerCase() === owner.toLowerCase()) {
            console.log('üëë Contract owner detected - full access granted');
            return {
                userId: "AUTHOR",
                wallet: userId,
                level: 6,
                referrerId: "",
                registrationTime: Date.now(),
                isActive: true,
                cardCount: 0,
                totalEarned: 0
            };
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ê–î–†–ï–°–ê –û–°–ù–û–í–ê–¢–ï–õ–ï–ô –°–û–ì–õ–ê–°–ù–û –°–ú–ê–†–¢-–ö–û–ù–¢–†–ê–ö–¢–£
const CENTRAL_FOUNDER = '0x0099188030174e381e7a7ee36d2783ecc31b6728'; // –ê–í–¢–û–†

const ALL_FOUNDERS = [
    '0x0099188030174e381e7a7ee36d2783ecc31b6728', // –ê–í–¢–û–† (—É—Ä–æ–≤–µ–Ω—å 6)
    '0xAB17aDbe29c4E1d695C239206682B02ebdB3f707', // –°–û–ê–í–¢–û–† 1 (—É—Ä–æ–≤–µ–Ω—å 5)
    '0xB5986B808dad481ad86D63DF152cC0ad7B473e48', // –°–û–ê–í–¢–û–† 2 (—É—Ä–æ–≤–µ–Ω—å 5)
    '0xa3496caCC8523421Dd151f1d92A456c2daFa28c2', // –°–û–ê–í–¢–û–† 3 (—É—Ä–æ–≤–µ–Ω—å 5)
    '0x8af1BC6B4a5aACED37889CC06bed4569A6B64044', // –°–û–ê–í–¢–û–† 4 (—É—Ä–æ–≤–µ–Ω—å 5)
    '0x0AB97e3934b1Afc9F1F6447CCF676E4f1D8B9639', // –°–û–ê–í–¢–û–† 5 (—É—Ä–æ–≤–µ–Ω—å 5)
    '0x03284A899147f5a07F82C622F34DF92198671635', // –°–û–ê–í–¢–û–† 6 (—É—Ä–æ–≤–µ–Ω—å 5)
    '0xb0E256cA055937a8FD9CA1F5e3D8A6bD44146d50'  // –°–û–ê–í–¢–û–† 7 (—É—Ä–æ–≤–µ–Ω—å 5)
];

        // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –¶–ï–ù–¢–†–ê–õ–¨–ù–û–ì–û –ê–í–¢–û–†–ê
        if (userId.toLowerCase() === CENTRAL_FOUNDER.toLowerCase()) {
            console.log('üëë Central founder detected - full access granted');
            return {
                userId: "AUTHOR",
                wallet: userId,
                level: 6,
                referrerId: "",
                registrationTime: Date.now(),
                isActive: true,
                cardCount: 0,
                totalEarned: 0
            };
        }
        
        // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –í–°–ï–• –°–û–ê–í–¢–û–†–û–í
        const isCoauthor = ALL_FOUNDERS.slice(1).some(addr => 
            addr.toLowerCase() === userId.toLowerCase()
        );
        
        if (isCoauthor) {
            const founderIndex = ALL_FOUNDERS.findIndex(addr => 
                addr.toLowerCase() === userId.toLowerCase()
            );
            console.log(`ü§ù Co-author ${founderIndex} detected - manager access granted`);
            return {
                userId: `COAUTHOR_${founderIndex}`,
                wallet: userId,
                level: 5,
                referrerId: "",
                registrationTime: Date.now(),
                isActive: true,
                cardCount: 0,
                totalEarned: 0
            };
        }
        
        // ‚úÖ –û–ë–´–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
        const result = await this.contract.methods.users(userId).call();
        
        if (!result[0] || result[0] === "") {
            throw new Error('User not registered');
        }
            
        return {
            userId: result[0],
            wallet: result[1],
            level: parseInt(result[2]),
            referrerId: result[3],
            registrationTime: result[4],
            isActive: result[5],
            cardCount: result[6],
            totalEarned: result[7]
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        throw error;
    }
}
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    async getUserReferrals(userId) {
        try {
            return await this.contract.methods
                .getUserReferrals(userId)
                .call();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
            throw error;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserCards(userId) {
        try {
            return await this.contract.methods
                .getUserCards(userId)
                .call();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–∫:', error);
            throw error;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    isWalletConnected() {
        return this.isConnected && this.currentAccount;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    getAddress() {
        return this.currentAccount;
    }
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    disconnect() {
        this.currentAccount = null;
        this.isConnected = false;
        this.walletType = null;
        this.web3 = null;
        this.contract = null;
        console.log('üîå –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.walletManager = new WalletManager();

// –£–ü–†–û–©–ï–ù–ù–û–ï –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
document.addEventListener('DOMContentLoaded', async () => {
    try {
        const provider = window.safepal || window.ethereum;
        
        if (provider) {
            const accounts = await provider.request({
                method: 'eth_accounts'
            });
            
            if (accounts.length > 0) {
                await walletManager.connectWallet();
                console.log('‚úÖ –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
            }
        }
    } catch (error) {
        console.log('‚ÑπÔ∏è –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–æ—à–µ–ª—å–∫–∞
if (window.safepal) {
    window.safepal.on('accountsChanged', (accounts) => {
        if (accounts.length === 0) {
            walletManager.disconnect();
            window.location.reload();
        } else {
            walletManager.currentAccount = accounts[0];
        }
    });
    
    window.safepal.on('chainChanged', () => {
        window.location.reload();
    });
} else if (window.ethereum) {
    window.ethereum.on('accountsChanged', (accounts) => {
        if (accounts.length === 0) {
            walletManager.disconnect();
            window.location.reload();
        } else {
            walletManager.currentAccount = accounts[0];
        }
    });
    
    window.ethereum.on('chainChanged', () => {
        window.location.reload();
    });
}
