// ‚úÖ CardGift Service Worker v2.0 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô
const CACHE_NAME = 'cardgift-v2.0.1';
const STATIC_CACHE = 'cardgift-static-v2';
const DYNAMIC_CACHE = 'cardgift-dynamic-v2';

// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú
const urlsToCache = [
    '/',
    '/index.html',
    '/generator.html',
    '/registration.html',
    '/dashboard.html',
    '/js/wallet-state.js',
    '/api/ping',
    // –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∏ –∏–∫–æ–Ω–∫–∏
    '/manifest.json',
    '/favicon.ico',
    // –í–Ω–µ—à–Ω–∏–µ CDN —Ä–µ—Å—É—Ä—Å—ã (–∫—Ä–∏—Ç–∏—á–Ω—ã–µ)
    'https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js',
    'https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js'
];

// ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ï–°–£–†–°–´ –î–õ–Ø –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø
const optionalResources = [
    '/api/user-cards',
    '/api/card/',
    '/api/og-image'
];

// ‚úÖ –£–°–¢–ê–ù–û–í–ö–ê SERVICE WORKER
self.addEventListener('install', function(event) {
    console.log('üöÄ CardGift SW v2.0 installing...');
    
    event.waitUntil(
        Promise.all([
            // –ö–µ—à–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
            caches.open(STATIC_CACHE).then(function(cache) {
                console.log('üì¶ Caching static files');
                return cache.addAll(urlsToCache).catch(err => {
                    console.warn('‚ö†Ô∏è Some files failed to cache:', err);
                    // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    return Promise.resolve();
                });
            }),
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π SW
            self.skipWaiting()
        ])
    );
});

// ‚úÖ –ê–ö–¢–ò–í–ê–¶–ò–Ø SERVICE WORKER
self.addEventListener('activate', function(event) {
    console.log('‚úÖ CardGift SW v2.0 activated');
    
    event.waitUntil(
        Promise.all([
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–µ—à–∏
            caches.keys().then(function(cacheNames) {
                return Promise.all(
                    cacheNames.map(function(cacheName) {
                        if (cacheName !== STATIC_CACHE && 
                            cacheName !== DYNAMIC_CACHE && 
                            cacheName !== CACHE_NAME) {
                            console.log('üóëÔ∏è Deleting old cache:', cacheName);
                            return caches.delete(cacheName);
                        }
                    })
                );
            }),
            
            // –°—Ä–∞–∑—É –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
            self.clients.claim()
        ])
    );
});

// ‚úÖ –£–ú–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–û–í
self.addEventListener('fetch', function(event) {
    const request = event.request;
    const url = new URL(request.url);
    
    // ‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø –ü–û –¢–ò–ü–£ –ó–ê–ü–†–û–°–ê
    
    // 1. HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã - Network First (–≤—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ)
    if (request.destination === 'document') {
        event.respondWith(networkFirstStrategy(request));
        return;
    }
    
    // 2. API –∑–∞–ø—Ä–æ—Å—ã - Network First —Å fallback
    if (url.pathname.startsWith('/api/')) {
        event.respondWith(networkFirstWithFallback(request));
        return;
    }
    
    // 3. JavaScript —Ñ–∞–π–ª—ã - Cache First
    if (request.destination === 'script') {
        event.respondWith(cacheFirstStrategy(request));
        return;
    }
    
    // 4. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏–∫–∞ - Cache First
    if (request.destination === 'image' || 
        request.destination === 'style' ||
        request.destination === 'font') {
        event.respondWith(cacheFirstStrategy(request));
        return;
    }
    
    // 5. –í–Ω–µ—à–Ω–∏–µ CDN —Ä–µ—Å—É—Ä—Å—ã - Cache First
    if (url.origin !== self.location.origin) {
        event.respondWith(cacheFirstStrategy(request));
        return;
    }
    
    // 6. –û—Å—Ç–∞–ª—å–Ω–æ–µ - Network First
    event.respondWith(networkFirstStrategy(request));
});

// ‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø: NETWORK FIRST (—Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
async function networkFirstStrategy(request) {
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Å–µ—Ç–∏
        const networkResponse = await fetch(request);
        
        // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ - –∫–µ—à–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        if (networkResponse.ok) {
            const cache = await caches.open(DYNAMIC_CACHE);
            cache.put(request, networkResponse.clone());
            return networkResponse;
        }
        
        throw new Error('Network response not ok');
        
    } catch (error) {
        console.log('üåê Network failed, trying cache for:', request.url);
        
        // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –±–µ—Ä–µ–º –∏–∑ –∫–µ—à–∞
        const cachedResponse = await caches.match(request);
        
        if (cachedResponse) {
            return cachedResponse;
        }
        
        // –ï—Å–ª–∏ –∏ –≤ –∫–µ—à–µ –Ω–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (request.destination === 'document') {
            return createOfflinePage();
        }
        
        throw error;
    }
}

// ‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø: CACHE FIRST (–∫–µ—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
async function cacheFirstStrategy(request) {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∫–µ—à–µ
    const cachedResponse = await caches.match(request);
    
    if (cachedResponse) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –≤ —Ñ–æ–Ω–µ (stale-while-revalidate)
        updateCacheInBackground(request);
        return cachedResponse;
    }
    
    // –ï—Å–ª–∏ –≤ –∫–µ—à–µ –Ω–µ—Ç - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏
    try {
        const networkResponse = await fetch(request);
        
        if (networkResponse.ok) {
            const cache = await caches.open(STATIC_CACHE);
            cache.put(request, networkResponse.clone());
        }
        
        return networkResponse;
        
    } catch (error) {
        console.warn('üì¶ Cache miss and network failed for:', request.url);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (request.destination === 'image') {
            return createPlaceholderImage();
        }
        
        throw error;
    }
}

// ‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø: NETWORK FIRST –° FALLBACK –î–õ–Ø API
async function networkFirstWithFallback(request) {
    try {
        const networkResponse = await fetch(request, {
            // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è API
            signal: AbortSignal.timeout(5000)
        });
        
        if (networkResponse.ok) {
            // –ö–µ—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
            if (request.method === 'GET') {
                const cache = await caches.open(DYNAMIC_CACHE);
                cache.put(request, networkResponse.clone());
            }
            return networkResponse;
        }
        
        throw new Error('API response not ok');
        
    } catch (error) {
        console.log('üîå API failed, trying cache for:', request.url);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
            return cachedResponse;
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock –æ—Ç–≤–µ—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö API
        return createMockApiResponse(request);
    }
}

// ‚úÖ –§–û–ù–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ï–®–ê
async function updateCacheInBackground(request) {
    try {
        const networkResponse = await fetch(request);
        if (networkResponse.ok) {
            const cache = await caches.open(STATIC_CACHE);
            await cache.put(request, networkResponse);
            console.log('üîÑ Background cache updated for:', request.url);
        }
    } catch (error) {
        console.log('üîÑ Background update failed for:', request.url);
    }
}

// ‚úÖ –°–û–ó–î–ê–ù–ò–ï –û–§–õ–ê–ô–ù –°–¢–†–ê–ù–ò–¶–´
function createOfflinePage() {
    const offlineHTML = `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>CardGift - Offline</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    background: linear-gradient(135deg, #0a0a0a, #1a1a1a);
                    color: #fff;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    min-height: 100vh;
                    margin: 0;
                    text-align: center;
                }
                .offline-container {
                    background: rgba(255,255,255,0.1);
                    border: 2px solid #FFD700;
                    border-radius: 20px;
                    padding: 40px;
                    max-width: 500px;
                }
                .offline-icon {
                    font-size: 64px;
                    margin-bottom: 20px;
                }
                .offline-title {
                    color: #FFD700;
                    font-size: 24px;
                    margin-bottom: 15px;
                }
                .offline-message {
                    color: #CCC;
                    margin-bottom: 25px;
                    line-height: 1.6;
                }
                .retry-btn {
                    background: linear-gradient(45deg, #FFD700, #FFA500);
                    color: #000;
                    border: none;
                    border-radius: 12px;
                    padding: 15px 30px;
                    font-weight: bold;
                    cursor: pointer;
                    font-size: 16px;
                }
            </style>
        </head>
        <body>
            <div class="offline-container">
                <div class="offline-icon">üì±</div>
                <h1 class="offline-title">You're Offline</h1>
                <p class="offline-message">
                    Don't worry! CardGift works offline too. 
                    Some features may be limited until you reconnect.
                </p>
                <button class="retry-btn" onclick="window.location.reload()">
                    üîÑ Try Again
                </button>
            </div>
        </body>
        </html>
    `;
    
    return new Response(offlineHTML, {
        headers: { 'Content-Type': 'text/html' }
    });
}

// ‚úÖ –°–û–ó–î–ê–ù–ò–ï PLACEHOLDER –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
function createPlaceholderImage() {
    const svg = `
        <svg width="300" height="200" xmlns="http://www.w3.org/2000/svg">
            <rect width="300" height="200" fill="#333"/>
            <text x="150" y="100" text-anchor="middle" fill="#666" font-family="Arial" font-size="16">
                üñºÔ∏è Image Offline
            </text>
        </svg>
    `;
    
    return new Response(svg, {
        headers: { 'Content-Type': 'image/svg+xml' }
    });
}

// ‚úÖ –°–û–ó–î–ê–ù–ò–ï MOCK API –û–¢–í–ï–¢–ê
function createMockApiResponse(request) {
    const url = new URL(request.url);
    
    // Mock –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö API
    const mockResponses = {
        '/api/user-cards': {
            success: true,
            cards: [],
            message: 'Offline mode - no cards available'
        },
        '/api/ping': {
            status: 'offline',
            timestamp: Date.now()
        }
    };
    
    const mockData = mockResponses[url.pathname] || {
        error: 'Service temporarily unavailable',
        offline: true
    };
    
    return new Response(JSON.stringify(mockData), {
        headers: { 'Content-Type': 'application/json' },
        status: 200
    });
}

// ‚úÖ PUSH –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è)
self.addEventListener('push', function(event) {
    if (!event.data) return;
    
    const data = event.data.json();
    const options = {
        body: data.body || 'CardGift notification',
        icon: '/icon-192.png',
        badge: '/icon-72.png',
        tag: 'cardgift-notification',
        data: data.url || '/',
        actions: [
            {
                action: 'open',
                title: 'Open CardGift'
            },
            {
                action: 'close',
                title: 'Close'
            }
        ]
    };
    
    event.waitUntil(
        self.registration.showNotification(data.title || 'CardGift', options)
    );
});

// ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ö–õ–ò–ö–û–í –ü–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú
self.addEventListener('notificationclick', function(event) {
    event.notification.close();
    
    if (event.action === 'open' || !event.action) {
        event.waitUntil(
            clients.openWindow(event.notification.data || '/')
        );
    }
});

// ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –û–¢ –ö–õ–ò–ï–ù–¢–ê
self.addEventListener('message', function(event) {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
    
    if (event.data && event.data.type === 'GET_VERSION') {
        event.ports[0].postMessage({
            version: CACHE_NAME,
            timestamp: Date.now()
        });
    }
});

// ‚úÖ –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
self.addEventListener('sync', function(event) {
    if (event.tag === 'background-sync') {
        event.waitUntil(
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            console.log('üîÑ Background sync triggered')
        );
    }
});

console.log('‚úÖ CardGift Service Worker v2.0 loaded successfully');
