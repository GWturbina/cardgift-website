// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
global.cards = global.cards || new Map();
const cards = global.cards;

// ‚úÖ –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–†–ï–í–¨–Æ
function generatePreview(cardData) {
    try {
        // –°–æ–∑–¥–∞–µ–º SVG –ø—Ä–µ–≤—å—é (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Canvas)
        const greeting = cardData.greeting || '–ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞';
        const lines = greeting.split('\n').filter(l => l.trim());
        const title = lines[0] || '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞';
        const subtitle = lines[1] || '–°–æ–∑–¥–∞–Ω–æ –≤ CardGift';
        
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è SVG
        const safeTitle = title.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        const safeSubtitle = subtitle.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG –ø—Ä–µ–≤—å—é
        const svg = `<svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <linearGradient id="bg" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#2C3E50;stop-opacity:1" />
                    <stop offset="100%" style="stop-color:#34495E;stop-opacity:1" />
                </linearGradient>
            </defs>
            
            <!-- –§–æ–Ω -->
            <rect width="800" height="600" fill="url(#bg)"/>
            
            <!-- –†–∞–º–∫–∞ -->
            <rect x="20" y="20" width="760" height="560" fill="none" stroke="#FFD700" stroke-width="4" rx="20"/>
            
            <!-- –ò–∫–æ–Ω–∫–∞ -->
            <text x="400" y="150" text-anchor="middle" font-size="80" fill="#FFD700">üéÅ</text>
            
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <text x="400" y="250" text-anchor="middle" font-size="48" font-weight="bold" fill="#FFD700" font-family="Arial, sans-serif">
                ${safeTitle.length > 20 ? safeTitle.substring(0, 20) + '...' : safeTitle}
            </text>
            
            <!-- –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <text x="400" y="320" text-anchor="middle" font-size="32" fill="#FFFFFF" font-family="Arial, sans-serif">
                ${safeSubtitle.length > 30 ? safeSubtitle.substring(0, 30) + '...' : safeSubtitle}
            </text>
            
            <!-- –ü–æ–¥–ø–∏—Å—å -->
            <text x="400" y="520" text-anchor="middle" font-size="24" fill="#CCC" font-family="Arial, sans-serif">
                Created with CardGift
            </text>
        </svg>`;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ Data URL
        const svgBase64 = Buffer.from(svg).toString('base64');
        const previewUrl = `data:image/svg+xml;base64,${svgBase64}`;
        
        console.log('‚úÖ SVG –ø—Ä–µ–≤—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∫–∞—Ä—Ç—ã');
        return previewUrl;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é:', error);
        
        // Fallback –ø—Ä–µ–≤—å—é
        const fallbackSvg = `<svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
            <rect width="800" height="600" fill="#2C3E50"/>
            <text x="400" y="300" text-anchor="middle" font-size="48" fill="#FFD700" font-family="Arial">üéÅ CardGift</text>
            <text x="400" y="350" text-anchor="middle" font-size="24" fill="#FFF" font-family="Arial">Greeting Card</text>
        </svg>`;
        
        const fallbackBase64 = Buffer.from(fallbackSvg).toString('base64');
        return `data:image/svg+xml;base64,${fallbackBase64}`;
    }
}

export default function handler(req, res) {
    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }
    
    const { method, query, body } = req;
    
    if (method === 'POST') {
        // ‚úÖ –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–ê–†–¢–´ –° –ì–ï–ù–ï–†–ê–¶–ò–ï–ô –ü–†–ï–í–¨–Æ
        const { cardId, cardData } = body;
        if (!cardId || !cardData) {
            return res.status(400).json({ error: 'Missing cardId or cardData' });
        }
        
        // ‚úÖ –ì–ï–ù–ï–†–ò–†–£–ï–ú –ü–†–ï–í–¨–Æ
        const previewUrl = generatePreview(cardData);
        
        // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–ï–í–¨–Æ –ö –î–ê–ù–ù–´–ú –ö–ê–†–¢–´
        const cardToSave = {
            ...cardData,
            previewUrl: previewUrl,
            thumbnailUrl: previewUrl, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            createdAt: Date.now(),
            views: 0,
            clicks: 0
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
        cards.set(cardId, cardToSave);
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –ø—Ä–µ–≤—å—é:', cardId, '–í—Å–µ–≥–æ –∫–∞—Ä—Ç:', cards.size);
        
        return res.json({ 
            success: true, 
            cardId: cardId,
            shareUrl: `${process.env.NEXT_PUBLIC_BASE_URL || `https://${req.headers.host}`}/api/save-card?id=${cardId}&preview=true`,
            previewUrl: previewUrl, // ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –ü–†–ï–í–¨–Æ –í –ì–ï–ù–ï–†–ê–¢–û–†
            message: 'Card saved successfully',
            totalCards: cards.size
        });
        
    } else if (method === 'GET') {
        const { id, preview } = query;
        
        if (!id) {
            return res.status(400).json({ error: 'Missing card ID' });
        }
        
        const cardData = cards.get(id);
        if (!cardData) {
            console.log('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ:', Array.from(cards.keys()).slice(0, 5));
            
            if (preview === 'true') {
                return res.status(404).send(`
                    <html><body style="text-align:center; margin:50px; font-family:Arial;">
                        <h1>‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
                        <p>ID: ${id}</p>
                        <p>–í—Å–µ–≥–æ –∫–∞—Ä—Ç –≤ —Å–∏—Å—Ç–µ–º–µ: ${cards.size}</p>
                    </body></html>
                `);
            } else {
                return res.status(404).json({ 
                    success: false, 
                    error: 'Card not found',
                    cardId: id,
                    totalCards: cards.size,
                    availableCards: Array.from(cards.keys()).slice(0, 5)
                });
            }
        }
        
        // ‚úÖ –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –°–ß–ï–¢–ß–ò–ö –ü–†–û–°–ú–û–¢–†–û–í
        cardData.views = (cardData.views || 0) + 1;
        cards.set(id, cardData); // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
        
        if (preview === 'true') {
            // ‚úÖ –ì–ï–ù–ï–†–ê–¶–ò–Ø HTML –° –ü–†–ï–í–¨–Æ –î–õ–Ø –ú–ï–°–°–ï–ù–î–ñ–ï–†–û–í
            const greeting = cardData.greeting || '–ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞';
            const lines = greeting.split('\n').filter(l => l.trim());
            const title = lines[0] || '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞';
            const description = lines[1] || '–°–æ–∑–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –≤ CardGift';
            
            // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
            const safeTitle = title.replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
            const safeDescription = description.replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
            
            // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–û–ï –ü–†–ï–í–¨–Æ
            const imageUrl = cardData.previewUrl || `https://${req.headers.host}/api/og-image?id=${id}`;
            
            const html = `<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta property="og:title" content="${safeTitle}">
    <meta property="og:description" content="${safeDescription}">
    <meta property="og:image" content="${imageUrl}">
    <meta property="og:url" content="https://${req.headers.host}/card-viewer.html?id=${id}">
    <meta property="og:type" content="website">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="${safeTitle}">
    <meta name="twitter:description" content="${safeDescription}">
    <meta name="twitter:image" content="${imageUrl}">
    <title>${safeTitle}</title>
    
    <!-- ‚úÖ –°–¢–ò–õ–ò –î–õ–Ø –ö–†–ê–°–ò–í–û–ì–û –ü–†–ï–í–¨–Æ -->
    <style>
        body { 
            margin: 0; 
            font-family: Arial, sans-serif; 
            background: linear-gradient(135deg, #2C3E50, #34495E);
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
        }
        .card-preview {
            text-align: center;
            max-width: 600px;
            padding: 40px;
        }
        .card-icon { font-size: 80px; margin-bottom: 20px; }
        .card-title { font-size: 36px; color: #FFD700; margin-bottom: 15px; }
        .card-description { font-size: 18px; color: #CCC; margin-bottom: 30px; }
        .card-button {
            background: #FFD700;
            color: #000;
            padding: 15px 30px;
            text-decoration: none;
            border-radius: 25px;
            font-weight: bold;
            display: inline-block;
            transition: all 0.3s ease;
        }
        .card-button:hover { background: #FFA500; }
    </style>
    
    <script>
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            window.location.href = "/card-viewer.html?id=${id}";
        }, 3000);
    </script>
</head>
<body>
    <div class="card-preview">
        <div class="card-icon">üéÅ</div>
        <h1 class="card-title">${safeTitle}</h1>
        <p class="card-description">${safeDescription}</p>
        <a href="/card-viewer.html?id=${id}" class="card-button">
            üì± –û—Ç–∫—Ä—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É
        </a>
        <p style="color:#666; font-size:12px; margin-top: 20px;">
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...<br>
            ID: ${id} | –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${cardData.views}
        </p>
    </div>
</body>
</html>`;
            
            res.setHeader('Content-Type', 'text/html; charset=utf-8');
            return res.status(200).send(html);
            
        } else {
            // ‚úÖ –í–û–ó–í–†–ê–©–ï–ù–ò–ï JSON –î–ê–ù–ù–´–• –ö–ê–†–¢–´
            console.log('‚úÖ –ö–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞:', id, '–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:', cardData.views);
            return res.json({ 
                success: true, 
                data: cardData,
                views: cardData.views,
                previewUrl: cardData.previewUrl
            });
        }
    }
    
    return res.status(405).json({ error: 'Method not allowed' });
}
