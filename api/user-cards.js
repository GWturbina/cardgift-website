// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø user-cards.js:
const cards = global.cards || (global.cards = new Map());

export default function handler(req, res) {
    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }

    try {
        console.log('üìä User-cards API: Total cards in system:', cards.size);
        
        // –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö 5 –∫–ª—é—á–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        const firstKeys = Array.from(cards.keys()).slice(0, 5);
        console.log('üîë First card keys in global.cards:', firstKeys);
        
        const { userId, walletAddress } = req.query;
        console.log('üîç Looking for cards by userId:', userId, 'wallet:', walletAddress);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã global.cards
        if (cards.size === 0) {
            console.warn('‚ö†Ô∏è WARNING: global.cards is empty! Check if save-card.js is using the same storage.');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userCards = Array.from(cards.entries())
            .filter(([id, data]) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ userId –∏–ª–∏ walletAddress
                const matchUserId = data.userId === userId;
                const matchWallet = walletAddress && data.walletAddress === walletAddress;
                console.log(`Card ${id}: userId match=${matchUserId}, wallet match=${matchWallet || 'N/A'}`);
                return matchUserId || matchWallet;
            })
            .map(([id, data]) => {
                const greeting = data.greetingText?.split('\n')[0] || '–û—Ç–∫—Ä—ã—Ç–∫–∞';
                const title = greeting.length > 50 ? greeting.substring(0, 50) + '...' : greeting;
                
                return {
                    cardId: id,
                    id: id, // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    title: title,
                    preview: `https://cardgift.bnb/api/og-image?id=${id}`,
                    previewUrl: `https://cardgift.bnb/api/og-image?id=${id}`,
                    shareUrl: `https://cardgift.bnb/api/save-card?id=${id}`,
                    style: data.style || 'classic',
                    hasMedia: !!(data.backgroundImage || data.videoUrl || data.mediaUrl),
                    views: data.views || 0,
                    clicks: data.clicks || 0,
                    createdAt: data.createdAt || Date.now(),
                    greetingText: data.greetingText || '',
                    userId: data.userId,
                    walletAddress: data.walletAddress
                };
            });

        console.log('üìä Found user cards:', userCards.length);
        
        if (userCards.length > 0) {
            console.log('üìù Cards details:');
            userCards.forEach(card => {
                console.log(`  - ${card.cardId}: ${card.title}`);
            });
        } else {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –õ–Æ–ë–´–• –∫–∞—Ä—Ç —É –õ–Æ–ë–´–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const allCards = Array.from(cards.entries());
            if (allCards.length > 0) {
                console.log('üìù There are cards in the system, but none for this user. Example card IDs:');
                allCards.slice(0, 3).forEach(([id, data]) => {
                    console.log(`  - ${id} (userId: ${data.userId})`);
                });
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        userCards.sort((a, b) => (b.createdAt || 0) - (a.createdAt || 0));

        res.status(200).json({
            success: true,
            cards: userCards,
            total: userCards.length,
            userId: userId,
            cardsInSystem: cards.size, // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–∞—Ä—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
            timestamp: Date.now()
        });

    } catch (error) {
        console.error('‚ùå Error in user-cards:', error);
        res.status(500).json({ 
            success: false, 
            error: 'Failed to fetch user cards',
            cards: [],
            total: 0
        });
    }
}
